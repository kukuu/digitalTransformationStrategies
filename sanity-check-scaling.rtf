{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red45\green50\blue53;\red231\green234\blue239;\red11\green91\blue169;
\red29\green98\blue183;\red67\green67\blue67;\red14\green19\blue23;\red26\green26\blue26;\red31\green31\blue31;
\red28\green28\blue28;\red109\green109\blue109;\red26\green26\blue26;\red255\green255\blue255;\red100\green100\blue100;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
Microservice \
\
Microservice architecture, or simply microservices, is a distinctive method of developing software systems that has grown in popularity in recent years.\'a0 In fact, even though there isn\'92t a whole lot out there on what it is and how to do it, for many developers it has become a preferred way of creating enterprise applications.\'a0 Thanks to its scalability, this architectural method is considered particularly ideal when you have to enable support for a range of platforms and devices\'97spanning web, mobile, Internet of Things, and wearables\'97or simply when you\'92re not sure what kind of devices you\'92ll need to support in an increasingly cloudy future.\'a0\
\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb1 \
\
Microservice architecture uses services to componentize and is usually organized around business capabilities; focuses on products instead of projects; has smart end points but not-so-smart info flow mechanisms; uses decentralized governance as well as decentralized data management; is designed to accommodate service interruptions; and, last but not least, is an evolutionary model.\'a0\
\'a0\
Now let\'92s take a closer look at how all of it actually plays out in practice\'85
\fs64 \cf4 \

\fs32 \cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Object Oriented Programming (OOP)\'97
\i a modern programming paradigm (see also {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29"}}{\fldrslt \cf5 SOLID}})\
\ls1\ilvl0
\i0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Web service / API\'97
\i a way to expose the functionality of your application to others, without a user interface\
\ls1\ilvl0
\i0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Service Oriented Architecture (SOA)\'97
\i a way of structuring many related applications to work together, rather than trying to solve all problems in one application\
\ls1\ilvl0
\i0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Systems\'97
\i in the general sense, meaning any collection of parts that can work together for a wider purpose\
\ls1\ilvl0
\i0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Single Responsibility Principle (SRP)\'97
\i the idea of code with one focus\
\ls1\ilvl0
\i0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls1\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Interface Segregation Principle (ISP)\'97
\i the idea of code with defined boundaries.
\i0\fs24 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
API Security 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Implement session based authentication\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\fs30 \cf6 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Identity \'96 who is making an API request?\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Authentication \'96 are they really are who they say they are?\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Authorization \'96 are they allowed to do what they are trying to do?
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\fs34 \cf6 \expnd0\expndtw0\kerning0
API Identity vs. Authentication \'96 Compare Google Maps and Twitter \'a0
\fs30 \
Take Yahoo and Google maps \'96 they are fairly open. \'a0They want to know who you are but they\'a0aren\'92t\'a0concerned what address you are looking up. So they use an \'93API key\'94 to establish identity, but don\'92t authenticate or authorize. So if you use someone else\'92s API key, it\'92s not good but not a serious security breach.\
\
The API key lets them identify (most likely) who is making a API call so they can limit on the number of requests you can make. Identity is important here to keep service volume under control.\
\
Then take Twitter\'92s API \'96 \'a0open for looking up public information about a user, but other operations require authentication. So Twitter supports both username/password authentication as well as OAuth. Twitter also has authorization checks in its code, so that you cannot \'93tweet\'94 on behalf of another user without either their password or an OAuth key to their account. This is an example of an API that implements identify, authentication and authorization.\
\

\fs34 The \'93API Key\'94 \'96 what it is:\'a0
\fs30 \
 Often a UUID or unique string. If the API key\'a0doesn\'92t\'a0grant access to very sensitive data, it might not be critical to keep secret, so this use of the API key is easy for the consumers of the API to use however they invoke the API.\
\
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb3 Usernames and Passwords 
\fs30 \cf6 \cb1 \
\
With more sensitive data a simple, API key is not enough, unless you take measures to ensure users keep the key secret. An alternative is username/password authentication, like the authentication scheme supported by the vast majority of secure web sites.\
\
It\'92s easiest to use \'93HTTP Basic\'94 authentication that most websites use. The advantage of using this technology is that nearly all clients and servers support it. There is no special processing required, as long as the caller takes reasonable precautions to keep the password secret.\
\
Twitter simplifies things for their users by using usernames and passwords for API authentication. \'a0Every time a user starts a Twitter client, it either prompts for the username and password to use, or it fetches them from the disk (db - where it is somehow scrambled or encrypted where possible). So here it makes a lot of sense to have the same username / password for the Twitter API that it used for the web site.\
\
Usernames and passwords also work well for application-to-application communications. The trick \'96 the password must be stored securely, and if it\'92s being used by a server, where do you store it? \'a0If you are running an application server that uses a database, you already have solved this same problem, because the database usually requires a password too. Better application server platforms include a \'93credential mapper\'94 that can be used to store such passwords relatively securely.\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
Risk Analysis 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \'85\'85\'85\'85\'85\'85\'85..\
\pard\pardeftab720\partightenfactor0

\fs30 \cf7 \expnd0\expndtw0\kerning0
Using APIs to provide data and functionality for users and developers comes with risk, since APIs are an entry point to your enterprise. To successfully thwart API attacks, the onus is on software architects to define and implement a security model that integrates fully with API design and usage.\'a0\uc0\u8232 \
 10 critical API security considerations for building an airtight API infrastructure, including:\

\fs26 \cf8 \
\pard\pardeftab720\li360\fi-360\partightenfactor0
\cf7 \'b7
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Safeguarding API data and functionality with the right access control policy
\fs26 \cf8 \
\cf7 \'b7
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Designing an API architecture from the attacker\'92s point of view
\fs26 \cf8 \
\cf7 \'b7
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Approaching API security as sessions that must work together
\fs26 \cf8 \
\cf7 \'b7
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Simplifying the API user and developer experience
\fs26 \cf8 \
\cf7 \'b7
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Understanding the human role in enforcing API security
\fs26 \cf8 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf7 \'a0
\fs26 \cf8 \
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb3 Enforcing security in PHP 
\fs26 \cf8 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf7 \'a0
\fs26 \cf8 \

\fs30 \cf7 Whether you are writing a PHP snippet or an entire module, it is important to keep your code secure.
\fs26 \cf8 \

\fs30 \cf7 \'a0
\fs26 \cf8 \
\pard\pardeftab720\li1440\fi-1440\partightenfactor0

\fs30 \cf7 i.
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Use check functions on output to prevent cross site scripting attacks
\fs26 \cf8 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf7 \'a0
\fs26 \cf8 \
\pard\pardeftab720\fi480\partightenfactor0

\fs30 \cf7 ii No piece of user-submitted content should ever be placed as-is into HTML.
\fs26 \cf8 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf7 \'a0
\fs26 \cf8 \
\pard\pardeftab720\li1440\fi-1440\partightenfactor0

\fs30 \cf7 ii.
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Use check_plain for plain text.
\fs26 \cf8 \

\fs30 \cf7 iii.
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Use filter_xss for markup-containing text, or
\fs26 \cf8 \

\fs30 \cf7 iv.
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 \'a0if the context is entered by an admin and should allow most markup, use filter_xss_admin. While it can also sanitize text, it's almost never correct to use check_markup in a theme or module except in the context of something like a text area with an associated text format.
\fs26 \cf8 \

\fs30 \cf7 v.
\fs18 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\fs30 Use the t() function with @ or % placeholders to construct safe, translatable strings.
\fs26 \cf8 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf7 \'a0\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb3 REST 
\fs26 \cf9 \cb1 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf10 REST(or REpresentational State Transfer) is a means of expressing specific entities in a system by URL path elements. REST is not an architecture but it is an architectural style to build services on top of the Web. REST allows interaction with a web-based system via simplified URLs rather than complex request body or POST parameters to request specific items from the system. \
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb3 Authentication and session management 
\fs28 \cf10 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs50 \cf0 \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth21180\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt20 \clpadl20 \clpadb20 \clpadr500 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs28 \cf10 RESTful web services should use 
\fs36 session-based authentication
\fs28 , either by establishing \
i) a session token via a POST or by using an \
\
ii) API key as a POST body argument or as a cookie. \
\
iii) Usernames, passwords, session tokens, and API keys should not appear in the URL, as this can be captured in web server logs, which makes them intrinsically valuable.\
\
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs36 \cf2 \cb3 OAuth for Authentication and Authorization 
\fs28 \cf10 \cb1 \
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs42 \cf0 \

\itap2\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth21180\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrs\brdrw20\brdrcf11 \clpadt20 \clpadl20 \clpadb20 \clpadr500 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720\partightenfactor0

\fs28 \cf10 The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.\nestcell \lastrow\nestrow\cell \lastrow\row
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf12 \cb13 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 HTTP Error 
\b 401
\b0  - Unauthorized: Access is denied due to invalid credentials. This behaviour occurs if the following conditions are true: The Web site that you try to view uses Integrated Windows authentication. The application pool for the Web site recycles during the authentication process.
\fs28 \cf14 \strokec14 3 Dec 2007\
\

\fs32 \cf12 \strokec12 A web server may or may not return a HTTP 
\b 403
\b0  Forbidden 
\b status
\b0  in response to a request from a client for a web page or help indicate that the server can be reached and process the request, but refuses to take any further action.\
\
The Web server (running the Web site) thinks that the data stream sent by the client (e.g. your Web browser or our CheckUpDown robot) was 'malformed' i.e. did not respect the HTTP protocol completely. ... It almost always means bad programming of the client system and/or the Web server. Fixing 
\b 400
\b0  errors - general - invalid request.
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}